import pytest
from rail_national.db import get_db


def test_index(client, auth):
    response = client.get("/")
    assert b"Log In" in response.data
    assert b"Register" in response.data

    auth.login()
    response = client.get("/")
    assert b"Log Out" in response.data
    assert b"LST" in response.data
    assert b"COL" in response.data
    assert b"SRA" in response.data
    assert b"2024-09-22 14:00:00.000" in response.data
    assert b"2024-09-22 14:10:00.000" in response.data


@pytest.mark.parametrize("path", (
    "/create",
    "/1/update",
    "/1/delete",
))
def test_login_required(client, path):
    response = client.post(path)
    assert response.headers["Location"] == "/auth/login"

@pytest.mark.parametrize("path", (
    "/2/update",
    "/2/delete",
))
def test_exists_required(client, auth, path):
    auth.login()
    assert client.post(path).status_code == 404

def test_create(client, auth, app):
    auth.login()
    assert client.get("/create").status_code == 200
    client.post("/create", data = {
        "route_id": 7357, 
        "origin_stn": "BHM", 
        "destn_stn": "EUS", 
        "stop_stn": "WFJ", 
        "origin_dep_time": "2024-09-22 15:00:00.000",
        "destn_arr_time": "2024-09-22 15:30:00.000",
        "stop_time": "2024-09-22 15:15:00.000",
        "cancelled": 0,
        })
    
    with app.app_context():
        db = get_db()
        count = db.execute("SELECT COUNT(route_id) FROM schedule").fetchone()[0]
        assert count == 2

def test_update(client, auth, app):
    auth.login()
    assert client.get("/7357/update").status_code == 200
    client.post("/7357/update", data = {
        "cancelled": 1,
    })

    with app.app_context():
        db = get_db()
        schedule = db.execute("SELECT * FROM schedule WHERE route_id = 7357").fetchone()
        assert schedule["cancelled"] == 1
        assert schedule["destn_stn"] == "WFJ"


# @pytest.mark.parametrize("path", (
#     "/create",
#     "/1/update",
# ))
# def test_create_update_validate(client, auth, path):
#     auth.login()
#     response = client.post(path, data = {

#     })
#     assert

def test_delete(client, auth, app):
    auth.login()
    response = client.post("/1/delete")
    assert response.headers["Location"] == "/"

    with app.app_context():
        db = get_db()
        schedule = db.execute("SELECT * FROM schedule WHERE id = 1").fetchone()
        assert schedule is None